/* This file was automatically generated from XML paramdefs. */
#ifndef _PARAMDEF_DECAL_PARAM_ST_H
#define _PARAMDEF_DECAL_PARAM_ST_H
#pragma once
#include <inttypes.h>

// Data Version: 1
// Is Big Endian: False
// Is Unicode: True
// Format Version: 203
struct DECAL_PARAM_ST {

	// NAME: Texture ID - テクスチャID
	// DESC: Texture ID - テクスチャID
	int32_t textureId;

	// NAME: Damipoli ID - ダミポリID
	// DESC: Damipoly ID of decal generation standard. If specified by TAE, it will be the value of TAE. - デカール発生基準のダミポリID。TAEで指定している場合はTAEの値になる
	int32_t dmypolyId;

	// NAME: Reference angle offset_up / down [deg] - 基準角度オフセット_上下[deg]
	// DESC: Reference angle offset_up / down [deg] - 基準角度オフセット_上下[deg]
	float pitchAngle;

	// NAME: Reference angle offset_left / right [deg] - 基準角度オフセット_左右[deg]
	// DESC: Reference angle offset_left / right [deg] - 基準角度オフセット_左右[deg]
	float yawAngle;

	// NAME: Pasting start distance [m] - 貼り付け開始距離[m]
	// DESC: Pasting start distance [m] - 貼り付け開始距離[m]
	float nearDistance;

	// NAME: Paste end distance [m] - 貼り付け終了距離[m]
	// DESC: Paste end distance [m] - 貼り付け終了距離[m]
	float farDistance;

	// NAME: Size at the start distance [m] - 開始距離での大きさ[m]
	// DESC: Size at the start distance [m] - 開始距離での大きさ[m]
	float nearSize;

	// NAME: Size at the end distance [m] - 終了距離での大きさ[m]
	// DESC: Size at the end distance [m] - 終了距離での大きさ[m]
	float farSize;

	// NAME: Monitoring special effects ID - 監視特殊効果ID
	// DESC: Monitoring special effect ID. If you enter an arbitrary special effect ID, decals will not be generated unless the special effect is applied. - 監視特殊効果ID。任意の特殊効果IDを入れた場合、その特殊効果がかかっていないとデカールを発生しなくなる。
	int32_t maskSpeffectId;

	// NAME: Padding - パディング
	// DESC: Padding - パディング
	uint32_t pad_10: 4;

	// NAME: Texture replacement by material - 材質によるテクスチャ差し替え
	// DESC: When it is generated by an attack hit, 1 changes the texture depending on the defense material. New Texture ID = Blood Material ID * 10000000 + Original Texture ID - 攻撃のヒットで発生させるときに1で防御材質によってテクスチャを変える。新しいテクスチャID=血材質ID*10000000+元のテクスチャID
	uint32_t replaceTextureId_byMaterial: 1;

	// NAME: Damipoli search location - ダミポリ検索場所
	// DESC: Damipoli Search Location 0: Body 1: Left Hand Weapon 2: Right Hand Weapon - ダミポリ検索場所 0:本体 1:左手武器 2:右手武器
	uint32_t dmypolyCategory: 2;

	// NAME: Padding - パディング
	// DESC: Padding - パディング
	uint32_t pad_05: 4;

	// NAME: Deferred - デファード
	// DESC: Acts as a deferred decal at 1 - 1でデファードデカールとして機能する
	uint32_t useDeferredDecal: 1;

	// NAME: paint - ペイント
	// DESC: Acts as a paint decal at 1 - 1でペイントデカールとして機能する
	uint32_t usePaintDecal: 1;

	// NAME: Bloody expression - 流血表現
	// DESC: Affected by optional bloody expression, ID is +1000 in mild, do not paste if hidden - オプションの流血表現の影響を受けるか、マイルドでIDが+1000される、非表示だと貼り付けない
	uint32_t bloodTypeEnable: 1;

	// NAME: Whether to use normal ingredients - ノーマル成分を使用するか
	// DESC: 1 if normal component is used (compatible with normal and shinyness texture integration) - ノーマル成分を使用するなら1（ノーマルとシャイニネスのテクスチャ統合対応）
	uint32_t bUseNormal: 1;

	// NAME: Padding - パディング
	// DESC: Padding - パディング
	uint32_t pad_08: 1;

	// NAME: Padding - パディング
	// DESC: Padding - パディング
	uint32_t pad_09: 1;

	// NAME: Whether to enable POM - POMを有効にするか
	// DESC: Whether to enable POM - POMを有効にするか
	uint32_t usePom: 1;

	// NAME: Whether to update emissive - エミッシブを更新するか
	// DESC: Whether to update emissive - エミッシブを更新するか
	uint32_t useEmissive: 1;

	// NAME: Whether to paste vertically - 垂直に貼り付けるか
	// DESC: Whether to paste vertically - 垂直に貼り付けるか
	uint32_t putVertical: 1;

	// NAME: Random scale minimum [%] - ランダムスケール最小値[％]
	// DESC: Random scale minimum [%] - ランダムスケール最小値[％]
	int16_t randomSizeMin;

	// NAME: Random scale maximum [%] - ランダムスケール最大値[％]
	// DESC: Random scale maximum [%] - ランダムスケール最大値[％]
	int16_t randomSizeMax;

	// NAME: Random angle_minimum twist [deg] - ランダム角度_ひねり最小値[deg]
	// DESC: Random angle_minimum twist [deg] - ランダム角度_ひねり最小値[deg]
	float randomRollMin;

	// NAME: Random angle _ maximum twist [deg] - ランダム角度_ひねり最大値[deg]
	// DESC: Random angle _ maximum twist [deg] - ランダム角度_ひねり最大値[deg]
	float randomRollMax;

	// NAME: Random angle_minimum top and bottom [deg] - ランダム角度_上下最小値[deg]
	// DESC: Random angle_minimum top and bottom [deg] - ランダム角度_上下最小値[deg]
	float randomPitchMin;

	// NAME: Random angle_maximum value [deg] - ランダム角度_上下最大値[deg]
	// DESC: Random angle_maximum value [deg] - ランダム角度_上下最大値[deg]
	float randomPitchMax;

	// NAME: Random angle_minimum left and right [deg] - ランダム角度_左右最小値[deg]
	// DESC: Random angle_minimum left and right [deg] - ランダム角度_左右最小値[deg]
	float randomYawMin;

	// NAME: Random angle_maximum left and right [deg] - ランダム角度_左右最大値[deg]
	// DESC: Random angle_maximum left and right [deg] - ランダム角度_左右最大値[deg]
	float randomYawMax;

	// NAME: POM height scale - POM高さスケール
	// DESC: POM height scale - POM高さスケール
	float pomHightScale;

	// NAME: Minimum number of POM samples - POM最小サンプル数
	// DESC: Minimum number of POM samples - POM最小サンプル数
	uint8_t pomSampleMin;

	// NAME: Maximum number of POM samples - POM最大サンプル数
	// DESC: Maximum number of POM samples - POM最大サンプル数
	uint8_t pomSampleMax;

	// NAME: Blend mode - ブレンドモード
	// DESC: Blend mode - ブレンドモード
	int8_t blendMode;

	// NAME: Reference coordinates for skipping decals - デカールを飛ばす基準座標
	// DESC: Reference coordinates that determine the direction in which the decal is flown - デカールを飛ばす方向を決定する基準座標
	int8_t appearDirType;

	// NAME: Emissive starting price - エミッシブ 開始値
	// DESC: Emissive starting price - エミッシブ 開始値
	float emissiveValueBegin;

	// NAME: Emissive end value - エミッシブ 終了値
	// DESC: Emissive end value - エミッシブ 終了値
	float emissiveValueEnd;

	// NAME: Emissive update time (seconds) - エミッシブ 更新時間(秒)
	// DESC: Interpolation time from start value to end value - 開始値～終了値の補間時間
	float emissiveTime;

	// NAME: Do you want to interpolate? - 補間するか？
	// DESC: Do you generate the time when the bar is extended due to the decal generation of TAE? - TAEのデカル発生でバーを伸ばしてる時間発生させるか？
	uint8_t bIntpEnable;

	// NAME: Padding - パディング
	// DESC: Padding - パディング
	uint8_t pad_01[3];

	// NAME: Interpolation interval [m] - 補間間隔[m]
	// DESC: Distance to interpolate decals generated between TAE bars when interpolation is enabled - 補間有効時にTAEのバーの間で発生したデカルを補間する距離
	float intpIntervalDist;

	// NAME: Texture ID at the start of interpolation - 補間開始時のテクスチャID
	// DESC: Texture ID at the start of interpolation (-1 uses the same value as the texture ID) - 補間開始時のテクスチャID（-1でテクスチャIDと同じ値を使う）
	int32_t beginIntpTextureId;

	// NAME: Texture ID at the end of interpolation - 補間終了時のテクスチャID
	// DESC: Texture at the end of interpolation Texture ID (-1 uses the same value as the texture ID) - 補間終了時のテクスチャテクスチャID（-1でテクスチャIDと同じ値を使う）
	int32_t endIntpTextureId;

	// NAME: SFX ID issued when the decal is affixed - デカールが貼られた時に出すSFXID
	// DESC: SFXID issued when the decal is affixed (Nothing is issued with -1) - デカールが貼られた時に出すSFXID（-1で何も出さない）
	int32_t appearSfxId;

	// NAME: Offset position of SFX - SFXのオフセット位置
	// DESC: Offset distance of SFX generation position - SFX発生位置のオフセット距離
	float appearSfxOffsetPos;

	// NAME: Mask texture ID - マスクテクスチャID
	// DESC: Mask texture ID (see texture ID with -1) - マスクテクスチャID（-1でテクスチャIDを見る）
	int32_t maskTextureId;

	// NAME: Albedo texture ID - アルベドテクスチャID
	// DESC: Albedo Texture ID (See Texture ID with -1) - アルベドテクスチャID（-1でテクスチャIDを見る）
	int32_t diffuseTextureId;

	// NAME: Reflect texture ID - リフレクテクスチャID
	// DESC: Reflectance texture ID (see texture ID with -1) - リフレクタンステクスチャID（-1でテクスチャIDを見る）
	int32_t reflecTextureId;

	// NAME: Mask strength - マスクの強さ
	// DESC: Mask strength (currently valid only with deferred decals) - マスクの強さ（現状、デファードデカールでのみ有効）
	float maskScale;

	// NAME: Normal texture ID - ノーマルテクスチャID
	// DESC: Normal texture ID (see texture ID with -1) - ノーマルテクスチャID（-1でテクスチャIDを見る）
	int32_t normalTextureId;

	// NAME: Height texture ID - ハイトテクスチャID
	// DESC: Height texture ID (see texture ID with -1) - ハイトテクスチャID（-1でテクスチャIDを見る）
	int32_t heightTextureId;

	// NAME: Emissive Texture ID - エミッシブテクスチャID
	// DESC: Emissive Texture ID (See Texture ID with -1) - エミッシブテクスチャID（-1でテクスチャIDを見る）
	int32_t emissiveTextureId;

	// NAME: Albedo color: R - アルベドカラー：R
	// DESC: Albedo color: R - アルベドの色：R
	uint8_t diffuseColorR;

	// NAME: Albedo color: G - アルベドカラー：G
	// DESC: Albedo color: G - アルベドの色：G
	uint8_t diffuseColorG;

	// NAME: Albedo color: B - アルベドカラー：B
	// DESC: Albedo color: B - アルベドの色：B
	uint8_t diffuseColorB;

	// NAME: Padding - パディング
	// DESC: Padding - パディング
	uint8_t pad_03[1];

	// NAME: Reflect color: R - リフレクカラー：R
	// DESC: Reflect color: R - リフレクの色：R
	uint8_t reflecColorR;

	// NAME: Reflect color: G - リフレクカラー：G
	// DESC: Reflect color: G - リフレクの色：G
	uint8_t reflecColorG;

	// NAME: Reflect color: B - リフレクカラー：B
	// DESC: Reflect color: B - リフレクの色：B
	uint8_t reflecColorB;

	// NAME: Is the life effective? - 寿命が有効か
	// DESC: Is the life effective? - 寿命が有効か
	uint8_t bLifeEnable;

	// NAME: The strength of shinyness - シャイニネスの強さ
	// DESC: The strength of shinyness - シャイニネスの強さ
	float siniScale;

	// NAME: Lifespan [seconds] - 寿命[秒]
	// DESC: Lifespan [seconds] (Time after decal is applied, fade-in time does not matter) - 寿命[秒]（デカールが貼られてからの時間、フェードイン時間は関係ない）
	float lifeTimeSec;

	// NAME: Fade out time [seconds] - フェードアウト時間[秒]
	// DESC: Fade out time [seconds] - フェードアウト時間[秒]
	float fadeOutTimeSec;

	// NAME: priority - 優先度
	// DESC: The larger this value, the easier it is to remain (-1 does not disappear) - この値が大きいほど残りやすい（-1は消滅しない）
	int16_t priority;

	// NAME: If there is a decal nearby, will it be thinned out? - 近くにデカールがあれば間引くか
	// DESC: Whether to thin out if there is a decal nearby - 近くにデカールがあれば間引くかどうか
	uint8_t bDistThinOutEnable;

	// NAME: Fix random pattern - ランダムパターンを固定化する
	// DESC: If you select "Yes", one variation number randomly determined for each texture other than 0 will be applied. The number of non-zero variations must be the same. - 「はい」にすると、各バリエーション数が0以外のテクスチャについてランダムに決めた一つのバリエーション番号が適用されるようになります。0以外の各バリエーション数は同じ値に揃える必要があります。
	uint8_t bAlignedTexRandomVariationEnable;

	// NAME: Candidates for thinning within this distance - この距離以内なら間引き候補
	// DESC: Candidates for thinning if there is a decal within this distance - この距離以内にデカールがあれば間引き候補
	float distThinOutCheckDist;

	// NAME: Candidates for thinning if the difference in direction is within this angle [degrees] - 方向の差がこの角度[度]以内なら間引き候補
	// DESC: Candidates for thinning if the difference in decal direction is within this angle - デカールの方向の差がこの角度以内なら間引き候補
	float distThinOutCheckAngleDeg;

	// NAME: If the number of satisfied conditions is more than this number, thin out - 条件を満たした数がこの数以上なら間引く
	// DESC: If the distance and angle are more than this number, thin out - 距離、角度がこの数以上なら間引く
	uint8_t distThinOutMaxNum;

	// NAME: How many recent thinnings to check - 直近何個まで間引きチェックするか
	// DESC: How many recent thinning candidates to check - 間引き候補を直近何個まで調べるか
	uint8_t distThinOutCheckNum;

	// NAME: Delay frame until it occurs [frame (30FPS conversion)] - 発生するまでの遅延フレーム[フレーム（30FPS換算）]
	// DESC: After trying to paste the decal, it will actually be pasted after this frame - デカールを貼り付けようとしてからこのフレーム後に実際に貼り付けられる
	int16_t delayAppearFrame;

	// NAME: Number of albedo variations - アルベド・バリエーション数
	// DESC: Number of random variations of albedo texture (including 0th, 2 for 2 textures) - アルベドテクスチャのランダムバリエーション数（0番目を含む、2でテクスチャ2枚分）
	uint32_t randVaria_Diffuse: 4;

	// NAME: Number of mask variations - マスク・バリエーション数
	// DESC: Number of random variations of mask texture (including 0th, 2 for 2 textures) - マスクテクスチャのランダムバリエーション数（0番目を含む、2でテクスチャ2枚分）
	uint32_t randVaria_Mask: 4;

	// NAME: Number of reflection variations - リフレク・バリエーション数
	// DESC: Number of random variations of reflex textures (including 0th, 2 for 2 textures) - リフレクテクスチャのランダムバリエーション数（0番目を含む、2でテクスチャ2枚分）
	uint32_t randVaria_Reflec: 4;

	// NAME: Padding - パディング
	uint32_t pad_12: 4;

	// NAME: Number of normal variations - ノーマル・バリエーション数
	// DESC: Number of random variations of normal texture (including 0th, 2 for 2 textures) - ノーマルテクスチャのランダムバリエーション数（0番目を含む、2でテクスチャ2枚分）
	uint32_t randVaria_Normal: 4;

	// NAME: Number of height variations - ハイト・バリエーション数
	// DESC: Number of random variations of height texture (including 0th, 2 for 2 textures) - ハイトテクスチャのランダムバリエーション数（0番目を含む、2でテクスチャ2枚分）
	uint32_t randVaria_Height: 4;

	// NAME: Number of emissive variations - エミッシブ・バリエーション数
	// DESC: Number of random variations of emissive textures (including 0th, 2 for 2 textures) - エミッシブテクスチャのランダムバリエーション数（0番目を含む、2でテクスチャ2枚分）
	uint32_t randVaria_Emissive: 4;

	// NAME: Padding - パディング
	// DESC: Padding - パディング
	uint32_t pad_11: 4;

	// NAME: Fade-in time [seconds] - フェードイン時間[秒]
	// DESC: Fade-in time [seconds] - フェードイン時間[秒]
	float fadeInTimeSec;

	// NAME: Decimation: Duplicate multiplication value - 間引き:重複乗算値
	// DESC: Determine if the decal size is duplicated by multiplying it by this value. - デカールサイズにこの値を乗算した範囲で重複かを判定する
	float thinOutOverlapMultiRadius;

	// NAME: Decimation: Neighborhood addition distance [m] - 間引き:近隣加算距離[m]
	// DESC: Judge whether it is a neighborhood within the range of adding this distance [m] to the decal size. - デカールサイズにこの距離[m]を加算した範囲で近隣かを判定する
	float thinOutNeighborAddRadius;

	// NAME: Decimation: Overlapping limit - 間引き:重複限界数
	// DESC: Limit number that can be duplicated - 重複可能な限界数
	uint32_t thinOutOverlapLimitNum;

	// NAME: Decimation: Neighborhood limit - 間引き:近隣限界数
	// DESC: Maximum number of neighbors - 近隣可能な限界数
	uint32_t thinOutNeighborLimitNum;

	// NAME: Thinning mode - 間引きモード
	// DESC: Thinning mode - 間引きモード
	int8_t thinOutMode;

	// NAME: Emissive color: R - エミッシブカラー：R
	// DESC: Emissive color: R - エミッシブの色：R
	uint8_t emissiveColorR;

	// NAME: Emissive color: G - エミッシブカラー：G
	// DESC: Emissive color: G - エミッシブの色：G
	uint8_t emissiveColorG;

	// NAME: Emissive color: B - エミッシブカラー：B
	// DESC: Emissive color: B - エミッシブの色：B
	uint8_t emissiveColorB;

	// NAME: SFX generation upper limit angle - SFX発生上限角度
	// DESC: SFX generation upper limit angle - SFX発生上限角度
	float maxDecalSfxCreatableSlopeAngleDeg;

	// NAME: Padding - パディング
	// DESC: Padding - パディング
	uint8_t pad_02[40];
};

#endif
